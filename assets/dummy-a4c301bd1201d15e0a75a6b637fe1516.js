"use strict"
define("dummy/app",["exports","ember-load-initializers","dummy/config/environment","dummy/resolver"],function(e,n,r,o){Object.defineProperty(e,"__esModule",{value:!0})
var p=Ember.Application.extend({modulePrefix:r.default.modulePrefix,podModulePrefix:r.default.podModulePrefix,Resolver:o.default});(0,n.default)(p,r.default.modulePrefix),e.default=p}),define("dummy/components/code-block",["exports","ember-prism/components/code-block"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default}),define("dummy/components/code-inline",["exports","ember-prism/components/code-inline"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default}),define("dummy/fixtures/contributors",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=[{id:"422902",name:"Matthew Dahl",username:"sandersky"},{id:"18398999",name:"sdesros",username:"sdesros"},{id:"8236686",name:"Michael Carroll",username:"juwara0"},{id:"2244653",name:"Phil Nachum",username:"pnachum"},{id:"9026198",name:"Steven Glanzer",username:"sglanzer"},{id:"9057680",name:"Eric White",username:"EWhite613"},{id:"1192053",name:"Ian Storz",username:"ianstarz"},{id:"35697",name:"Justin Bowes",username:"justinbowes"},{id:"411788",name:"Adam Meadows",username:"job13er"},{id:"7063255",name:"Seena Rowhani",username:"srowhani"}]}),define("dummy/fixtures/validators",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=[{description:"Property can be of any type.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.any,\n    baz: PropTypes.any.isRequired,\n    foo: PropTypes.any({required: true}),\n    spam: PropTypes.any({updatable: false})\n  }\n})\n    ",name:"any"},{description:"Property must be an array.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.array,\n    baz: PropTypes.array.isRequired,\n    foo: PropTypes.array({required: true}),\n    spam: PropTypes.array({updatable: false})\n  }\n})\n    ",name:"array"},{description:"Property must be an array of given type.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.arrayOf(PropTypes.string),\n    baz: PropTypes.arrayOf(PropTypes.string).isRequired,\n    foo: PropTypes.arrayOf(PropTypes.string, {required: true}),\n    spam: PropTypes.arrayOf(PropTypes.string, {updatable: false})\n  }\n})\n    ",name:"arrayOf"},{description:"Property must be a boolean.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.bool,\n    baz: PropTypes.bool.isRequired,\n    foo: PropTypes.bool({required: true}),\n    spam: PropTypes.bool({updatable: false})\n  }\n})\n    ",name:"bool"},{description:"Property must be a date.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.date,\n    baz: PropTypes.date.isRequired,\n    foo: PropTypes.date({required: true}),\n    spam: PropTypes.date({updatable: false})\n  }\n})\n    ",name:"date"},{description:"Property must be an instance of Element.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.element,\n    baz: PropTypes.element.isRequired,\n    foo: PropTypes.element({required: true}),\n    spam: PropTypes.element({updatable: false})\n  }\n})\n    ",name:"element"},{description:"Property must be from {{component}} helper.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.EmberComponent,\n    baz: PropTypes.EmberComponent.isRequired,\n    foo: PropTypes.EmberComponent({required: true}),\n    spam: PropTypes.EmberComponent({updatable: false})\n  }\n})\n    ",hbs:"\n{{my-component\n  bar={{component 'foo-bar'}}\n  baz={{component 'foo-bar' 'test' 'spam'}}\n  foo={{component prop1='test' prop2='spam'}}\n}}\n    ",name:"EmberComponent"},{description:"Property must be an Ember.Object.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.EmberObject,\n    baz: PropTypes.EmberObject.isRequired,\n    foo: PropTypes.EmberObject({required: true}),\n    spam: PropTypes.EmberObject({updatable: false})\n  }\n})\n    ",name:"EmberObject"},{description:"Property must be a function.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.func,\n    baz: PropTypes.func.isRequired,\n    foo: PropTypes.func({required: true}),\n    spam: PropTypes.func({updatable: false})\n  }\n})\n    ",name:"func"},{description:"Property must be an instance of given class.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.instanceOf(HTMLElement),\n    baz: PropTypes.instanceOf(HTMLElement).isRequired\n    foo: PropTypes.instanceOf(HTMLElement, {required: true}),\n    spam: PropTypes.instanceOf(HTMLElement, {updatable: false})\n  }\n})\n    ",name:"instanceOf"},{description:"Property must be null. This is typically useful in conjunction with oneOfType.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.oneOfType([\n      PropTypes.null,\n      PropTypes.string\n    ])\n  }\n})\n    ",name:"null"},{description:"Property must be a number.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.number,\n    baz: PropTypes.number.isRequired,\n    foo: PropTypes.number({required: true}),\n    spam: PropTypes.number({updatable: false})\n  }\n})\n    ",name:"number"},{description:"Property must be an object.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.object,\n    baz: PropTypes.object.isRequired,\n    foo: PropTypes.object({required: true}),\n    spam: PropTypes.object({updatable: false})\n  }\n})\n    ",name:"object"},{description:"Property value must be in set of possible values.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.oneOf(['bar', 'baz']),\n    baz: PropTypes.oneOf(['bar', 'baz']).isRequired,\n    foo: PropTypes.oneOf(\n      [\n        'bar',\n        'baz'\n      ],\n      {\n        required: true\n      }\n    ),\n    spam: PropTypes.oneOf(\n      [\n        'bar',\n        'baz'\n      ],\n      {\n        updatable: false\n      }\n    )\n  }\n})\n    ",name:"oneOf"},{description:"Property type must be in set of possible types.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.oneOfType([\n      PropTypes.null,\n      PropTypes.string\n    ]),\n    baz: PropTypes.oneOfType([\n      PropTypes.null,\n      PropTypes.string\n    ]).isRequired,\n    foo: PropTypes.oneOfType(\n      [\n        PropTypes.null,\n        PropTypes.string\n      ],\n      {\n        required: true\n      }\n    ),\n    spam: PropTypes.oneOfType(\n      [\n        PropTypes.null,\n        PropTypes.string\n      ],\n      {\n        updatable: false\n      }\n    )\n  }\n})\n    ",name:"oneOfType"},{description:"Property must be an Object of the given shape.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.shape({\n      bar: PropTypes.number.isRequired,\n      baz: PropTypes.string\n    }),\n    baz: PropTypes.shape({\n      bar: PropTypes.number.isRequired,\n      baz: PropTypes.string\n    }).isRequired,\n    foo: PropTypes.shape(\n      {\n        bar: PropTypes.number.isRequired,\n        baz: PropTypes.string\n      },\n      {\n        required: true\n      }\n    ),\n    spam: PropTypes.shape(\n      {\n        bar: PropTypes.number.isRequired,\n        baz: PropTypes.string\n      },\n      {\n        updatable: false\n      }\n    )\n  }\n})\n    ",name:"shape"},{description:"Property must be a string.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.string,\n    baz: PropTypes.string.isRequired,\n    foo: PropTypes.string({required: true}),\n    spam: PropTypes.string({updatable: false})\n  }\n})\n    ",name:"string"},{description:"Property must be a symbol.",example:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    bar: PropTypes.symbol,\n    baz: PropTypes.symbol.isRequired,\n    foo: PropTypes.symbol({required: true}),\n    spam: PropTypes.symbol({updatable: false})\n  }\n})\n    ",name:"symbol"}]}),define("dummy/helpers/hook",["exports","ember-hook/helpers/hook"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"hook",{enumerable:!0,get:function(){return n.hook}})}),define("dummy/initializers/component-prop-types",["exports","ember-prop-types/initializers/component-prop-types"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return n.initialize}})}),define("dummy/initializers/container-debug-adapter",["exports","ember-resolver/resolvers/classic/container-debug-adapter"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default={name:"container-debug-adapter",initialize:function(){var e=arguments[1]||arguments[0]
e.register("container-debug-adapter:main",n.default),e.inject("container-debug-adapter:main","namespace","application:main")}}}),define("dummy/initializers/ember-hook/initialize",["exports","ember-hook/initializers/ember-hook/initialize"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"default",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(e,"initialize",{enumerable:!0,get:function(){return n.initialize}})}),define("dummy/initializers/export-application-global",["exports","dummy/config/environment"],function(e,n){function r(){var e=arguments[1]||arguments[0]
if(!1!==n.default.exportApplicationGlobal){var r
if("undefined"!=typeof window)r=window
else if("undefined"!=typeof global)r=global
else{if("undefined"==typeof self)return
r=self}var o,p=n.default.exportApplicationGlobal
o="string"==typeof p?p:Ember.String.classify(n.default.modulePrefix),r[o]||(r[o]=e,e.reopen({willDestroy:function(){this._super.apply(this,arguments),delete r[o]}}))}}Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=r,e.default={name:"export-application-global",initialize:r}}),define("dummy/resolver",["exports","ember-resolver"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0}),e.default=n.default}),define("dummy/router",["exports","dummy/config/environment"],function(e,n){Object.defineProperty(e,"__esModule",{value:!0})
var r=Ember.Router.extend({location:n.default.locationType,rootURL:n.default.rootURL})
r.map(function(){}),e.default=r}),define("dummy/routes/application",["exports","dummy/fixtures/contributors","dummy/fixtures/validators"],function(e,n,r){Object.defineProperty(e,"__esModule",{value:!0})
var o=Ember.Route
e.default=o.extend({model:function(){return{config:"\n'ember-prop-types': {\n  // When true components will throw an error if they are missing propTypes. (Default is false)\n  requireComponentPropTypes: true,\n\n  // Validate properties coming from a spread property (default is undefined)\n  spreadProperty: 'options',\n\n  // Throw errors instead of logging warnings (default is false)\n  throwErrors: true,\n\n  // Validate properties (default is true for all environments except \"production\")\n  validate: true,\n\n  // Validate properties when they are updated (default is false)\n  validateOnUpdate: true\n}\n",contributors:n.default,defaultsExample:"\nimport Ember from 'ember'\nconst {Component} = Ember\nimport PropTypeMixin, {PropTypes} from 'ember-prop-types'\n\nexport default Component.extend(PropTypeMixin, {\n  propTypes: {\n    baz: PropTypes.number,\n    foo: PropTypes.string\n  },\n\n  getDefaultProps () {\n    return {\n      baz: 1,\n      foo: 'bar'\n    }\n  }\n})\n\n",validators:r.default}}})}),define("dummy/templates/application",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"qCJEvxGd",block:'{"symbols":["contributor","validator"],"statements":[[6,"div"],[9,"class","flex header"],[7],[0,"\\n  "],[6,"h1"],[7],[0,"ember-prop-types"],[8],[0,"\\n  "],[6,"a"],[9,"href","https://github.com/ciena-blueplanet/ember-prop-types/blob/master/LICENSE.md"],[7],[0,"\\n    "],[6,"img"],[9,"alt","MIT License"],[9,"src","mit-d9d55730279d560591b31d4b0aab52b2.png"],[7],[8],[0,"\\n  "],[8],[0,"\\n  "],[6,"a"],[9,"href","https://github.com/ciena-blueplanet/ember-prop-types"],[7],[0,"\\n    "],[6,"img"],[9,"alt","Github"],[9,"src","octocat-e020986dbdafe5c1e97be521f17a28d8.png"],[7],[8],[0,"\\n  "],[8],[0,"\\n"],[8],[0,"\\n\\n"],[6,"p"],[7],[0,"\\n  This project aims to improve the developer experience of property management within Ember\\n  apps and addons by implementing the entire React proptype API with a few additional\\n  validators. By using "],[6,"em"],[7],[0,"ember-prop-types"],[8],[0," a developer is informed when a property\\n  being fed to a component is not of the expected type, as well as allows a developer to group\\n  all default property values under a single method.\\n"],[8],[0,"\\n\\n"],[6,"p"],[7],[0,"\\n  "],[6,"em"],[7],[0,"ember-prop-types"],[8],[0," comes with a few configuration options which can be set in "],[6,"em"],[7],[0,"config/environment.js"],[8],[0,"\\n  for all environments or specific environments. Below is an example configuration with comments as to what each\\n  option is for:\\n  "],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[1,[20,["model","config"]],false]],"parameters":[]},null],[0,"\\n"],[8],[0,"\\n\\n"],[6,"h2"],[7],[0,"Validators"],[8],[0,"\\n\\n"],[6,"div"],[9,"class","flex"],[7],[0,"\\n"],[4,"each",[[19,0,["model","validators"]]],null,{"statements":[[0,"    "],[6,"section"],[7],[0,"\\n      "],[6,"dt"],[7],[1,[19,2,["name"]],false],[8],[0,"\\n      "],[6,"dl"],[7],[1,[19,2,["description"]],false],[8],[0,"\\n      "],[6,"h4"],[7],[0,"Component Definition"],[8],[0,"\\n      "],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[1,[19,2,["example"]],false]],"parameters":[]},null],[0,"\\n"],[4,"if",[[19,2,["hbs"]]],null,{"statements":[[0,"        "],[6,"h4"],[7],[0,"Consumption in Templae"],[8],[0,"\\n        "],[4,"code-block",null,[["language"],["handlebars"]],{"statements":[[1,[19,2,["hbs"]],false]],"parameters":[]},null],[0,"\\n"]],"parameters":[]},null],[0,"    "],[8],[0,"\\n"]],"parameters":[2]},null],[8],[0,"\\n\\n"],[6,"h2"],[7],[0,"Default Values"],[8],[0,"\\n\\n"],[6,"div"],[9,"class","flex"],[7],[0,"\\n  "],[6,"section"],[7],[0,"\\n    "],[6,"dt"],[7],[0,"getDefaultProps()"],[8],[0,"\\n    "],[6,"dl"],[7],[0,"Method to get default property values."],[8],[0,"\\n    "],[4,"code-block",null,[["language"],["javascript"]],{"statements":[[1,[20,["model","defaultsExample"]],false]],"parameters":[]},null],[0,"\\n  "],[8],[0,"\\n"],[8],[0,"\\n\\n"],[6,"h2"],[7],[0,"Contributors"],[8],[0,"\\n\\n"],[6,"div"],[9,"class","contributors flex"],[7],[0,"\\n"],[4,"each",[[19,0,["model","contributors"]]],null,{"statements":[[0,"    "],[6,"a"],[10,"href",[25,"concat",["https://github.com/",[19,1,["username"]]],null],null],[7],[0,"\\n      "],[6,"img"],[10,"alt",[19,1,["username"]],null],[10,"src",[25,"concat",["https://avatars3.githubusercontent.com/u/",[19,1,["id"]]],null],null],[7],[8],[0,"\\n      "],[6,"br"],[7],[8],[0,"\\n      "],[1,[19,1,["name"]],false],[0,"\\n    "],[8],[0,"\\n"]],"parameters":[1]},null],[8],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/application.hbs"}})}),define("dummy/templates/components/code-block",["exports"],function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=Ember.HTMLBars.template({id:"7hTcwWv6",block:'{"symbols":["&default"],"statements":[[6,"code"],[10,"class",[18,"languageClass"],null],[7],[11,1],[8],[0,"\\n"]],"hasEval":false}',meta:{moduleName:"dummy/templates/components/code-block.hbs"}})}),define("dummy/config/environment",[],function(){try{var e="dummy/config/environment",n=document.querySelector('meta[name="'+e+'"]').getAttribute("content"),r={default:JSON.parse(unescape(n))}
return Object.defineProperty(r,"__esModule",{value:!0}),r}catch(n){throw new Error('Could not read config from meta tag with name "'+e+'".')}}),runningTests||require("dummy/app").default.create({})
